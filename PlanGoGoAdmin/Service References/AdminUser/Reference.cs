//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlanGoGoAdmin.AdminUser {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminUser.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/CheckUser", ReplyAction="http://tempuri.org/IUser/CheckUserResponse")]
        BusinessEntites.Admin.AdminUser CheckUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/CheckUser", ReplyAction="http://tempuri.org/IUser/CheckUserResponse")]
        System.Threading.Tasks.Task<BusinessEntites.Admin.AdminUser> CheckUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_GetUser", ReplyAction="http://tempuri.org/IUser/Admin_GetUserResponse")]
        System.Collections.Generic.List<BusinessEntites.Admin_GetUser> Admin_GetUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_GetUser", ReplyAction="http://tempuri.org/IUser/Admin_GetUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Admin_GetUser>> Admin_GetUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_UpdateUser", ReplyAction="http://tempuri.org/IUser/Admin_UpdateUserResponse")]
        void Admin_UpdateUser(string userName, string password, string CreatedBy, int AdminUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_UpdateUser", ReplyAction="http://tempuri.org/IUser/Admin_UpdateUserResponse")]
        System.Threading.Tasks.Task Admin_UpdateUserAsync(string userName, string password, string CreatedBy, int AdminUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_CheckUserExist", ReplyAction="http://tempuri.org/IUser/Admin_CheckUserExistResponse")]
        System.Collections.Generic.List<BusinessEntites.Admin_GetUser> Admin_CheckUserExist(string userName, int AdminUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_CheckUserExist", ReplyAction="http://tempuri.org/IUser/Admin_CheckUserExistResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Admin_GetUser>> Admin_CheckUserExistAsync(string userName, int AdminUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_GetUserOnId", ReplyAction="http://tempuri.org/IUser/Admin_GetUserOnIdResponse")]
        BusinessEntites.Admin_GetUser Admin_GetUserOnId(int AdminUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Admin_GetUserOnId", ReplyAction="http://tempuri.org/IUser/Admin_GetUserOnIdResponse")]
        System.Threading.Tasks.Task<BusinessEntites.Admin_GetUser> Admin_GetUserOnIdAsync(int AdminUserId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : PlanGoGoAdmin.AdminUser.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<PlanGoGoAdmin.AdminUser.IUser>, PlanGoGoAdmin.AdminUser.IUser {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BusinessEntites.Admin.AdminUser CheckUser(string userName, string password) {
            return base.Channel.CheckUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<BusinessEntites.Admin.AdminUser> CheckUserAsync(string userName, string password) {
            return base.Channel.CheckUserAsync(userName, password);
        }
        
        public System.Collections.Generic.List<BusinessEntites.Admin_GetUser> Admin_GetUser() {
            return base.Channel.Admin_GetUser();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Admin_GetUser>> Admin_GetUserAsync() {
            return base.Channel.Admin_GetUserAsync();
        }
        
        public void Admin_UpdateUser(string userName, string password, string CreatedBy, int AdminUserId) {
            base.Channel.Admin_UpdateUser(userName, password, CreatedBy, AdminUserId);
        }
        
        public System.Threading.Tasks.Task Admin_UpdateUserAsync(string userName, string password, string CreatedBy, int AdminUserId) {
            return base.Channel.Admin_UpdateUserAsync(userName, password, CreatedBy, AdminUserId);
        }
        
        public System.Collections.Generic.List<BusinessEntites.Admin_GetUser> Admin_CheckUserExist(string userName, int AdminUserId) {
            return base.Channel.Admin_CheckUserExist(userName, AdminUserId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Admin_GetUser>> Admin_CheckUserExistAsync(string userName, int AdminUserId) {
            return base.Channel.Admin_CheckUserExistAsync(userName, AdminUserId);
        }
        
        public BusinessEntites.Admin_GetUser Admin_GetUserOnId(int AdminUserId) {
            return base.Channel.Admin_GetUserOnId(AdminUserId);
        }
        
        public System.Threading.Tasks.Task<BusinessEntites.Admin_GetUser> Admin_GetUserOnIdAsync(int AdminUserId) {
            return base.Channel.Admin_GetUserOnIdAsync(AdminUserId);
        }
    }
}
