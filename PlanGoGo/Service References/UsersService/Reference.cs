//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlanGoGo.UsersService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UsersService.IUserServices")]
    public interface IUserServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_DeleteUserAttractions", ReplyAction="http://tempuri.org/IUserServices/User_DeleteUserAttractionsResponse")]
        void User_DeleteUserAttractions(int userAttractionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_DeleteUserAttractions", ReplyAction="http://tempuri.org/IUserServices/User_DeleteUserAttractionsResponse")]
        System.Threading.Tasks.Task User_DeleteUserAttractionsAsync(int userAttractionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_GetUserAttractionSaved", ReplyAction="http://tempuri.org/IUserServices/User_GetUserAttractionSavedResponse")]
        System.Collections.Generic.List<BusinessEntites.Users.UserAttractionEntity> User_GetUserAttractionSaved(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_GetUserAttractionSaved", ReplyAction="http://tempuri.org/IUserServices/User_GetUserAttractionSavedResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Users.UserAttractionEntity>> User_GetUserAttractionSavedAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_GetUserInformation", ReplyAction="http://tempuri.org/IUserServices/User_GetUserInformationResponse")]
        System.Collections.Generic.List<BusinessEntites.Users.UserEntity> User_GetUserInformation(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_GetUserInformation", ReplyAction="http://tempuri.org/IUserServices/User_GetUserInformationResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Users.UserEntity>> User_GetUserInformationAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_InsertingUserInfo", ReplyAction="http://tempuri.org/IUserServices/User_InsertingUserInfoResponse")]
        void User_InsertingUserInfo(BusinessEntites.Users.UserEntity userEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_InsertingUserInfo", ReplyAction="http://tempuri.org/IUserServices/User_InsertingUserInfoResponse")]
        System.Threading.Tasks.Task User_InsertingUserInfoAsync(BusinessEntites.Users.UserEntity userEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_UserAttractionUpdate", ReplyAction="http://tempuri.org/IUserServices/User_UserAttractionUpdateResponse")]
        void User_UserAttractionUpdate(BusinessEntites.Users.UserAttractionEntity userAttractionEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_UserAttractionUpdate", ReplyAction="http://tempuri.org/IUserServices/User_UserAttractionUpdateResponse")]
        System.Threading.Tasks.Task User_UserAttractionUpdateAsync(BusinessEntites.Users.UserAttractionEntity userAttractionEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_UserExistChecking", ReplyAction="http://tempuri.org/IUserServices/User_UserExistCheckingResponse")]
        bool User_UserExistChecking(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/User_UserExistChecking", ReplyAction="http://tempuri.org/IUserServices/User_UserExistCheckingResponse")]
        System.Threading.Tasks.Task<bool> User_UserExistCheckingAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServicesChannel : PlanGoGo.UsersService.IUserServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServicesClient : System.ServiceModel.ClientBase<PlanGoGo.UsersService.IUserServices>, PlanGoGo.UsersService.IUserServices {
        
        public UserServicesClient() {
        }
        
        public UserServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void User_DeleteUserAttractions(int userAttractionId) {
            base.Channel.User_DeleteUserAttractions(userAttractionId);
        }
        
        public System.Threading.Tasks.Task User_DeleteUserAttractionsAsync(int userAttractionId) {
            return base.Channel.User_DeleteUserAttractionsAsync(userAttractionId);
        }
        
        public System.Collections.Generic.List<BusinessEntites.Users.UserAttractionEntity> User_GetUserAttractionSaved(int userId) {
            return base.Channel.User_GetUserAttractionSaved(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Users.UserAttractionEntity>> User_GetUserAttractionSavedAsync(int userId) {
            return base.Channel.User_GetUserAttractionSavedAsync(userId);
        }
        
        public System.Collections.Generic.List<BusinessEntites.Users.UserEntity> User_GetUserInformation(string userName, string password) {
            return base.Channel.User_GetUserInformation(userName, password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BusinessEntites.Users.UserEntity>> User_GetUserInformationAsync(string userName, string password) {
            return base.Channel.User_GetUserInformationAsync(userName, password);
        }
        
        public void User_InsertingUserInfo(BusinessEntites.Users.UserEntity userEntity) {
            base.Channel.User_InsertingUserInfo(userEntity);
        }
        
        public System.Threading.Tasks.Task User_InsertingUserInfoAsync(BusinessEntites.Users.UserEntity userEntity) {
            return base.Channel.User_InsertingUserInfoAsync(userEntity);
        }
        
        public void User_UserAttractionUpdate(BusinessEntites.Users.UserAttractionEntity userAttractionEntity) {
            base.Channel.User_UserAttractionUpdate(userAttractionEntity);
        }
        
        public System.Threading.Tasks.Task User_UserAttractionUpdateAsync(BusinessEntites.Users.UserAttractionEntity userAttractionEntity) {
            return base.Channel.User_UserAttractionUpdateAsync(userAttractionEntity);
        }
        
        public bool User_UserExistChecking(string userName) {
            return base.Channel.User_UserExistChecking(userName);
        }
        
        public System.Threading.Tasks.Task<bool> User_UserExistCheckingAsync(string userName) {
            return base.Channel.User_UserExistCheckingAsync(userName);
        }
    }
}
